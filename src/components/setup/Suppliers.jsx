import React, { useState } from 'react';
import './SetupPage.css';

const Suppliers = () => {
  const [showModal, setShowModal] = useState(false);
  const [editingItem, setEditingItem] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');

  const [suppliers, setSuppliers] = useState([
    {
      id: 1,
      code: 'NCC001',
      name: 'C√¥ng ty TNHH Ph√¢n ph·ªëi ABC',
      phone: '0281234567',
      address: '123 ƒê∆∞·ªùng ƒêi·ªán Bi√™n Ph·ªß, Qu·∫≠n B√¨nh Th·∫°nh, TP.HCM',
      taxCode: '0123456789',
      productType: 'ƒêi·ªán t·ª≠, Gia d·ª•ng',
      note: 'Nh√† cung c·∫•p ch√≠nh, uy t√≠n',
      status: 'active'
    },
    {
      id: 2,
      code: 'NCC002',
      name: 'C√¥ng ty C·ªï ph·∫ßn XYZ',
      phone: '0287654321',
      address: '456 ƒê∆∞·ªùng Nguy·ªÖn VƒÉn C·ª´, Qu·∫≠n 5, TP.HCM',
      taxCode: '9876543210',
      productType: 'Th·ª±c ph·∫©m, ƒê·ªì u·ªëng',
      note: 'Ch·∫•t l∆∞·ª£ng t·ªët, giao h√†ng nhanh',
      status: 'active'
    },
    {
      id: 3,
      code: 'NCC003',
      name: 'Doanh nghi·ªáp t∆∞ nh√¢n DEF',
      phone: '0901122334',
      address: '789 ƒê∆∞·ªùng L√™ VƒÉn Vi·ªát, Qu·∫≠n 9, TP.HCM',
      taxCode: '1357924680',
      productType: 'VƒÉn ph√≤ng ph·∫©m',
      note: 'Gi√° c·∫£ h·ª£p l√Ω',
      status: 'inactive'
    }
  ]);

  const [formData, setFormData] = useState({
    code: '',
    name: '',
    phone: '',
    address: '',
    taxCode: '',
    productType: '',
    note: '',
    status: 'active'
  });

  const productTypes = [
    'ƒêi·ªán t·ª≠, Gia d·ª•ng',
    'Th·ª±c ph·∫©m, ƒê·ªì u·ªëng',
    'VƒÉn ph√≤ng ph·∫©m',
    'Qu·∫ßn √°o, Th·ªùi trang',
    'X√¢y d·ª±ng, V·∫≠t li·ªáu',
    'Y t·∫ø, D∆∞·ª£c ph·∫©m',
    'N√¥ng s·∫£n, Th·ª±c ph·∫©m t∆∞∆°i s·ªëng',
    'Kh√°c'
  ];

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value
    });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (editingItem) {
      setSuppliers(suppliers.map(item => 
        item.id === editingItem.id ? { ...formData, id: editingItem.id } : item
      ));
    } else {
      setSuppliers([...suppliers, { ...formData, id: Date.now() }]);
    }
    setShowModal(false);
    setEditingItem(null);
    resetForm();
  };

  const resetForm = () => {
    setFormData({
      code: '',
      name: '',
      phone: '',
      address: '',
      taxCode: '',
      productType: '',
      note: '',
      status: 'active'
    });
  };

  const handleEdit = (item) => {
    setEditingItem(item);
    setFormData(item);
    setShowModal(true);
  };

  const handleDelete = (id) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a nh√† cung c·∫•p n√†y?')) {
      setSuppliers(suppliers.filter(item => item.id !== id));
    }
  };

  const filteredSuppliers = suppliers.filter(supplier =>
    supplier.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    supplier.code.toLowerCase().includes(searchTerm.toLowerCase()) ||
    supplier.phone.includes(searchTerm) ||
    supplier.productType.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleExport = () => {
    // Logic export to Excel
    alert('Ch·ª©c nƒÉng export Excel ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn');
  };

  const handleImport = () => {
    // Logic import from Excel
    alert('Ch·ª©c nƒÉng import Excel ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn');
  };

  return (
    <div className="setup-page">
      <div className="page-header">
        <h1>Danh s√°ch nh√† cung c·∫•p</h1>
        <p>Qu·∫£n l√Ω danh s√°ch nh√† cung c·∫•p h√†ng h√≥a</p>
      </div>

      <div className="data-table-container">
        <div className="table-header">
          <input
            type="text"
            placeholder="T√¨m ki·∫øm theo t√™n, m√£, s·ªë ƒëi·ªán tho·∫°i ho·∫∑c lo·∫°i h√†ng..."
            className="search-box"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <div className="table-actions">
            <button 
              className="btn btn-primary"
              onClick={() => {
                resetForm();
                setShowModal(true);
                setEditingItem(null);
              }}
            >
              + Th√™m nh√† cung c·∫•p
            </button>
            <button className="btn btn-success" onClick={handleExport}>
              üì§ Export Excel
            </button>
            <button className="btn btn-secondary" onClick={handleImport}>
              üì• Import Excel
            </button>
          </div>
        </div>

        <table className="data-table">
          <thead>
            <tr>
              <th>M√£ NCC</th>
              <th>T√™n nh√† cung c·∫•p</th>
              <th>S·ªë ƒëi·ªán tho·∫°i</th>
              <th>ƒê·ªãa ch·ªâ</th>
              <th>M√£ s·ªë thu·∫ø</th>
              <th>Lo·∫°i h√†ng</th>
              <th>Ghi ch√∫</th>
              <th>T√¨nh tr·∫°ng</th>
              <th>Thao t√°c</th>
            </tr>
          </thead>
          <tbody>
            {filteredSuppliers.map((supplier) => (
              <tr key={supplier.id}>
                <td>{supplier.code}</td>
                <td>{supplier.name}</td>
                <td>{supplier.phone}</td>
                <td>{supplier.address}</td>
                <td>{supplier.taxCode}</td>
                <td>{supplier.productType}</td>
                <td>{supplier.note}</td>
                <td>
                  <span className={`status-badge ${supplier.status === 'active' ? 'status-active' : 'status-inactive'}`}>
                    {supplier.status === 'active' ? 'Ho·∫°t ƒë·ªông' : 'Ng∆∞ng ho·∫°t ƒë·ªông'}
                  </span>
                </td>
                <td>
                  <div className="action-buttons">
                    <button 
                      className="btn btn-secondary btn-small"
                      onClick={() => handleEdit(supplier)}
                    >
                      S·ª≠a
                    </button>
                    <button 
                      className="btn btn-danger btn-small"
                      onClick={() => handleDelete(supplier.id)}
                    >
                      X√≥a
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>

        {filteredSuppliers.length === 0 && (
          <div style={{ textAlign: 'center', padding: '40px', color: '#6c757d' }}>
            Kh√¥ng t√¨m th·∫•y nh√† cung c·∫•p n√†o
          </div>
        )}
      </div>

      {/* Modal */}
      {showModal && (
        <div className="modal-overlay">
          <div className="modal-content">
            <div className="modal-header">
              <h3>{editingItem ? 'Ch·ªânh s·ª≠a' : 'Th√™m m·ªõi'} nh√† cung c·∫•p</h3>
              <button className="close-btn" onClick={() => setShowModal(false)}>√ó</button>
            </div>

            <form onSubmit={handleSubmit}>
              <div className="form-grid">
                <div className="form-group">
                  <label>M√£ nh√† cung c·∫•p <span className="required">*</span></label>
                  <input
                    type="text"
                    name="code"
                    value={formData.code}
                    onChange={handleInputChange}
                    placeholder="Nh·∫≠p m√£ nh√† cung c·∫•p"
                    required
                  />
                </div>
                <div className="form-group">
                  <label>T√™n nh√† cung c·∫•p <span className="required">*</span></label>
                  <input
                    type="text"
                    name="name"
                    value={formData.name}
                    onChange={handleInputChange}
                    placeholder="Nh·∫≠p t√™n nh√† cung c·∫•p"
                    required
                  />
                </div>
                <div className="form-group">
                  <label>S·ªë ƒëi·ªán tho·∫°i <span className="required">*</span></label>
                  <input
                    type="tel"
                    name="phone"
                    value={formData.phone}
                    onChange={handleInputChange}
                    placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                    required
                  />
                </div>
                <div className="form-group">
                  <label>M√£ s·ªë thu·∫ø</label>
                  <input
                    type="text"
                    name="taxCode"
                    value={formData.taxCode}
                    onChange={handleInputChange}
                    placeholder="Nh·∫≠p m√£ s·ªë thu·∫ø"
                  />
                </div>
                <div className="form-group">
                  <label>Lo·∫°i h√†ng</label>
                  <select
                    name="productType"
                    value={formData.productType}
                    onChange={handleInputChange}
                  >
                    <option value="">Ch·ªçn lo·∫°i h√†ng</option>
                    {productTypes.map(type => (
                      <option key={type} value={type}>{type}</option>
                    ))}
                  </select>
                </div>
                <div className="form-group">
                  <label>T√¨nh tr·∫°ng</label>
                  <select
                    name="status"
                    value={formData.status}
                    onChange={handleInputChange}
                  >
                    <option value="active">Ho·∫°t ƒë·ªông</option>
                    <option value="inactive">Ng∆∞ng ho·∫°t ƒë·ªông</option>
                  </select>
                </div>
              </div>

              <div className="form-group full-width">
                <label>ƒê·ªãa ch·ªâ <span className="required">*</span></label>
                <textarea
                  name="address"
                  value={formData.address}
                  onChange={handleInputChange}
                  placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ nh√† cung c·∫•p"
                  rows="3"
                  required
                />
              </div>

              <div className="form-group full-width">
                <label>Ghi ch√∫</label>
                <textarea
                  name="note"
                  value={formData.note}
                  onChange={handleInputChange}
                  rows="3"
                  placeholder="Nh·∫≠p ghi ch√∫ v·ªÅ nh√† cung c·∫•p"
                />
              </div>

              <div className="form-actions">
                <button type="button" onClick={() => setShowModal(false)} className="btn btn-secondary">
                  H·ªßy
                </button>
                <button type="submit" className="btn btn-primary">
                  {editingItem ? 'C·∫≠p nh·∫≠t' : 'Th√™m m·ªõi'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default Suppliers;
